version: 0.2

phases:

  install:
    commands:
      # AWS Codebuild Go images use /go for the $GOPATH so let's symlink our
      # application source code into that directory structure.
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/handler"

      # Install golint
      - go get golang.org/x/lint/golint

      # Install Testify to use common assertions and mocks in tests
      - go get -u github.com/stretchr/testify

  pre_build:
    commands:
      # Run pre-build checks for ESSendSMSNotification
      # Make sure we're in the project directory within our GOPATH
      - cd "/go/src/handler/functions/ESSendSMSNotification"

      # Fetch all dependencies
      - go get ./...

      # Ensure code passes all lint tests
      - golint -set_exit_status

      # Check for common Go application problems with 'go tool vet'
      - go tool vet .

      # Run all tests included with our application
      - go test .

      # ==================================================

      # Run pre-build checks for ESSendSMSNotification
      - cd "/go/src/handler/functions/ESSendEmergencyVoiceCall"
      - go get ./...
      - golint -set_exit_status
      - go tool vet .
      - go test .

      # Run pre-build checks for ESPollLocation
      - cd "/go/src/handler/functions/ESPollLocation"
      - go get ./...
      - golint -set_exit_status
      - go tool vet .
      - go test .

      
      - cd "/go/src/handler/functions/ESGetLockScreenInfo"
      - go get ./...
      - golint -set_exit_status
      - go tool vet .

      - cd "/go/src/handler/functions/ESServiceLocator"
      - go get ./...
      - golint -set_exit_status
      - go tool vet .


  build:
    commands:
      # Run build ESSendSMSNotification
      # Change directory into ESSendSMSNotification
      - cd "/go/src/handler/functions/ESSendSMSNotification"
      
      # Build our go application
      - go build -o main

      # ==================================================

      # Run build ESSendEmergencyVoiceCall
      # Change directory into ESSendEmergencyVoiceCall
      - cd "/go/src/handler/functions/ESSendEmergencyVoiceCall"
      
      # Build our go application
      - go build -o main
      
      # ==================================================

      # Run build ESPollLocation
      # Change directory into ESPollLocation
      - cd "/go/src/handler/functions/ESPollLocation"
      
      # Build our go application
      - go build -o main

      # ==================================================

      # Run build ESGetLockScreenInfo
      # Change directory into ESGetLockScreenInfo
      - cd "/go/src/handler/functions/ESGetLockScreenInfo"
      
      # Build our go application
      - go build -o main
      
      # ==================================================
      
      # Run build ESServiceLocator
      # Change directory into ESServiceLocator
      - cd "/go/src/handler/functions/ESServiceLocator"
      
      # Build our go application
      - go build -o main
      
      # ==================================================

      # Go back to the root of the repository
      - cd "/go/src/handler"
      
      # Copy static assets to S3, and package application with AWS CloudFormation/SAM
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml

  post_build:
    commands:
      # Do not remove this statement. This command is required for AWS CodeStar projects.
      # Update the AWS Partition, AWS Region, account ID and project ID in the project ARN on template-configuration.json file so AWS CloudFormation can tag project resources.
      - sed -i.bak 's/\$PARTITION\$/'${PARTITION}'/g;s/\$AWS_REGION\$/'${AWS_REGION}'/g;s/\$ACCOUNT_ID\$/'${ACCOUNT_ID}'/g;s/\$PROJECT_ID\$/'${PROJECT_ID}'/g' template-configuration.json

artifacts:
  type: zip
  files:
    - template-export.yml
    - template-configuration.json
