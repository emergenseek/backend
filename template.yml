AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ""

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: AllAtOnce
      Role: !Ref CodeDeployRole
      Timeout: 30

Resources:
  ESSendSMSNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESSendSMSNotification
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /sms
            Method: post
  ConfigLambdaPermissionSMSNotification:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESSendSMSNotification
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESSendSMSNotification
      Principal: apigateway.amazonaws.com
  
  ESSendEmergencyVoiceCall:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESSendEmergencyVoiceCall
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /voice
            Method: post
  ConfigLambdaPermissionVoice:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESSendEmergencyVoiceCall
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESSendEmergencyVoiceCall
      Principal: apigateway.amazonaws.com

  ESPollLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESPollLocation
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /poll
            Method: post
  ConfigLambdaPermissionPoll:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESPollLocation
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESPollLocation
      Principal: apigateway.amazonaws.com

  ESGetLockScreenInfo:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESGetLockScreenInfo
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /lock
            Method: post
  ConfigLambdaPermissionLock:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESGetLockScreenInfo
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESGetLockScreenInfo
      Principal: apigateway.amazonaws.com
  
  ESServiceLocator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESServiceLocator
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /locate
            Method: post
  ConfigLambdaPermissionLocator:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESServiceLocator
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESServiceLocator
      Principal: apigateway.amazonaws.com
  
  ESManageSettings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESManageSettings
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /settings/{user_id+}
            Method: any # Only PATCH and GET are valid
  ConfigLambdaPermissionSettings:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESManageSettings
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESManageSettings
      Principal: apigateway.amazonaws.com
  
  ESAddContact:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESAddContact
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /contact/{user_id+}
            Method: post
  ConfigLambdaPermissionContact:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESAddContact
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESAddContact
      Principal: apigateway.amazonaws.com

  ESUpdateTier:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ESUpdateTier
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /tier/{user_id+}
            Method: put
  ConfigLambdaPermissionTier:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESUpdateTier
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESUpdateTier
      Principal: apigateway.amazonaws.com
  
    ESCreateUser:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/ESCreateUser
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /create
            Method: PUT
  ConfigLambdaPermissionProfile:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESCreateUser
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESCreateUser
      Principal: apigateway.amazonaws.com

  ESManageProfile:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/ESManageProfile
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /profile/{user_id+}
            Method: ANY
  ConfigLambdaPermissionProfile:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESManageProfile
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESManageProfile
      Principal: apigateway.amazonaws.com

  ESGetEmergencyNumbers:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: functions/ESGetEmergencyNumbers
      Handler: main
      Runtime: go1.x
      Tracing: Active
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /number/{latitude}/{longitude+}
            Method: GET
  ConfigLambdaPermissionNumbers:
    Type: AWS::Lambda::Permission
    DependsOn:
      - ESGetEmergencyNumbers
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ESManageProfile
      Principal: apigateway.amazonaws.com
  
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CodeStar-emergenseek-bac-Execution-Lambda"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/AdministratorAccess # Bad practice to use AdministratorAccess
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary"

